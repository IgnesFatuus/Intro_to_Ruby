QUESTION 1

if false
  greeting = “hello world”
end

greeting

What do you expect to happen when the greeting variable is called?

  greeting is nil, therefore no "undefined method or local variable" error will be thrown. Normally, an eroor/exception is thrown/raised, but if a variable is initialized inside an if block, even if that block is never executed, the local variable will be initialized to nil.


QUESTION 2

greetings = { a: 'hi' }
informal_greeting = greetings[:a]
informal_greeting << ' there'

puts informal_greeting  #  => "hi there"
puts greetings

What is the result of the last line of code?

  It is also "hi there". Well, the whole hash is {:a=>"hi there"}. This is because informal_greeting is a reference to greetings[a:], which is the original object. Now, normally this is fine, but because we used << which does not reassign, but adds to, we modified the original object. << will mutate the caller. If we wanted to only modify informal greeting, we would want to use an assignment operation of some kind instead. In this case += would work: informal_greeting += ' there'.

QUESTION 3

A)

  def mess_with_vars(one, two, three)
    one = two
    two = three
    three = one
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

B)

  def mess_with_vars(one, two, three)
    one = "two"
    two = "three"
    three = "one"
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

C)

  def mess_with_vars(one, two, three)
    one.gsub!("one","two")
    two.gsub!("two","three")
    three.gsub!("three","one")
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

  What will be printed by each set of code groups?

    SET A: "one is: one", "two is: two", "three is: three"

    SET B: "one is: one", "two is: two", "three is: three"

    SET C: "one is: two", "two is: three", "three is: one"

QUESTION 4

Ben was tasked to write a simple ruby method to determine if an input string is an IP address representing dot-separated numbers. e.g. "10.4.5.11". He is not familiar with regular expressions. Alyssa supplied Ben with a method called is_an_ip_number? that determines if a string is a numeric string between 0 and 255 as required for IP numbers and asked Ben to use it.

def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    break unless is_an_ip_number?(word)
  end
  return true
end

Alyssa reviewed Ben's code and says "It's a good start, but you missed a few things. You're not returning a false condition, and you're not handling the case that there are more or fewer than 4 components to the IP address (e.g. "4.5.5" or "1.2.3.4.5" should be invalid)."

Help Ben fix his code.

  def dot_separated_ip_address?(input_string)
    =>dot_counter = 0
    =>dot_separated_words = input_string.split(/(.)/)
    while dot_separated_words.size > 0 do
      word = dot_separated_words.pop
      =>dot_counter += 1 if word == "."
      =>return false if dot_counter > 4 || dot_counter < 4
      =>next if word == "."
      =>return false unless is_an_ip_number?(word)
    end
    true
  end

  OR

  BY THE BOOK

  def dot_separated_ip_address?(input_string)
    dot_separated_words = input_string.split(".")
    =>return false unless dot_separated_words.size == 4

    while dot_separated_words.size > 0 do
      word = dot_separated_words.pop
      =>return false unless is_an_ip_number?(word)
    end

    true
  end

